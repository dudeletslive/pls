var Transform = require('stream').Transform || require('readable-stream').Transform;
var util = require('util');

module.exports = CSVStream;


function CSVStream (opts, cb) {
	if(!(this instanceof CSVStream))
		return new CSVStream(opts, cb);

	Transform.call(this, opts);

	if(typeof opts === "function") {
		cb = opts;
		opts = {};
	}else {
		opts = opts || {};
	}

	// inner settings
	this.encoding = opts.encoding || 'utf8';
	this.delimiter = opts.delimiter || ',';
	this.newline = opts.newline || '\n';
	this.quote = opts.quote || '\"';
	this.header = opts.header || false;
	this.cb = cb || function() {};

	// inner variables
	this.lineNo = 0;
	this.header_arr = [];
	this.body_arr = [];

}

util.inherits(CSVStream, Transform);

CSVStream.prototype._transform = function(chunk, encoding, cb) {

	var chunk = chunk.toString(this.encoding);
	var bkl_arr = this._br_line(chunk);

	// have quote
	for (var i = 0; i < bkl_arr.length; i++) {
		this._parse(bkl_arr[i]);
	}
	cb();
}

CSVStream.prototype._br_line = function(chunk) {
	var bkl_reg = new RegExp('([^' + this.newline + ']*)','g');
	var bkl_result = chunk.match(bkl_reg);
	return bkl_result;
}

// quoting problem
CSVStream.prototype._parse = function(line) {
	// a line of record
	if(line !== '') {
		this.lineNo++;
		var line_split = line.split(this.delimiter);
		var rec_obj = {};
		var rec_arr = [];
		for(var j = 0; j < line_split.length; j++) {
			var str_trim = line_split[j].trim();
			if(str_trim.indexOf('""') !== -1) {
				// replace all escape double quotes
				var esc_double_regex  = new RegExp ('(' + this.quote + this.quote + ')', 'g');
				var esc_str = str_trim.replace(esc_double_regex, '\"');
			}else {
				esc_str = str_trim;
			}

			if(esc_str.indexOf('"') === 0 && esc_str.lastIndexOf('"') === esc_str.length -1) {
				esc_str = esc_str.substr(1, esc_str.length -1);
				esc_str = esc_str.substr(0, esc_str.length -1);
			}

			if(this.lineNo === 1 && this.header === true) {
				// have a header
				this.header_arr.push(esc_str);
			}else if(this.lineNo !== 1 && this.header === true){
				rec_obj[this.header_arr[j]] = esc_str;
			}else {
				// no header
				rec_arr.push(esc_str)
			}
		}

		if(this.lineNo === 2 && this.header === true) {
			this.body_arr.push(rec_obj);
			this.push("[" + "\n" + JSON.stringify(rec_obj) + "\n");
		}else if(this.lineNo > 2 && this.header === true) {
			this.body_arr.push(rec_obj);
			this.push("," + JSON.stringify(rec_obj) + "\n");
		}else if(this.lineNo === 1 && this.header === false){
			this.body_arr.push(rec_arr);
			this.push("[" + "\n" + JSON.stringify(rec_arr) + "\n");
		}else if(this.lineNo !== 1 && this.header === false) {
			this.body_arr.push(rec_arr);
			this.push("," + JSON.stringify(rec_arr) + "\n");
		}
	}
}

CSVStream.prototype._flush = function(cb) {
	this._field_length = null;
	this.cb(null, this.body_arr);
	this.push(']')
	this.header_arr = [];
	this.body_arr = [];
	cb();
}
